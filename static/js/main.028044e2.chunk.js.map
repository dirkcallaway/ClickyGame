{"version":3,"sources":["components/ScoreBar/index.js","components/Header/index.js","components/PictureCard/index.js","components/PlayAgain/index.js","App.js","serviceWorker.js","index.js"],"names":["ScoreBar","props","react_default","a","createElement","className","score","highScore","Header","href","require","PictureCard","id","color","onClick","handleClick","name","PlayAgain","reset","numbers","App","state","currentScore","beenClicked","gameOver","ResetGame","_this","setState","ShuffleCards","array","i","length","j","Math","floor","random","temp","HandleClickEvent","includes","concat","MakeNumberCards","map","number","components_PictureCard","key","components_Header","components_ScoreBar","this","components_PlayAgain","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.028044e2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ScoreBar(props) {\n  return (\n    <div className=\"row scorebar\">\n      <div className=\"col s1 m6 right-align\">\n        <h5 className=\"inline\">\n          Current Streak:\n        </h5>\n        <h5 className=\"inline ml-2\">\n          {props.score}\n        </h5>\n      </div>\n      <div className=\"col s1 m6\">\n        <h5 className=\"inline\">\n          Top Streak:\n        </h5>\n        <h5 className=\"inline ml-2\">\n          {props.highScore}\n        </h5>\n      </div>\n    </div>\n  )\n}\n\nexport default ScoreBar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return (\n    <nav>\n    <div className=\"nav-wrapper\">\n      <a href=\"home\" className=\"brand-logo center\">Clicky Game</a>\n    </div>\n  </nav>\n  )\n}\n\nexport default Header;","import React from \"react\";\nrequire ('./style.css')\n\nfunction PictureCard(props) {\n  return (\n      <div className=\"card\" id={props.color} onClick={() => props.handleClick(props.name)}>\n        <div className=\"card-content white-text\">\n            <h1 className=\"numbers center-block center\">{props.name}</h1>\n        </div>\n      </div>\n  )\n}\n\nexport default PictureCard;","import React from \"react\";\r\nrequire ('./style.css')\r\n\r\nfunction PlayAgain(props) {\r\n  return(\r\n    <div id=\"playAgain\">\r\n      <div className=\"modal-content center-align\">\r\n        <h4>Game Over</h4>\r\n        <p>Want to play again?</p>\r\n      </div>\r\n      <div className=\"modal-footer center-align\">\r\n        <button onClick={props.reset} className=\"waves-effect waves-light btn\">Play Again</button>\r\n      </div>\r\n    </div>\r\n  )}\r\n\r\n  export default PlayAgain;","import React, { Component } from 'react';\nimport ScoreBar from './components/ScoreBar/';\nimport Header from './components/Header';\nimport PictureCard from './components/PictureCard';\nimport PlayAgain from './components/PlayAgain';\nconst numbers = require ('./numbers.json')\n\nclass App extends Component {\n  state = {\n    numbers,\n    currentScore : 0,\n    highScore : 0,\n    beenClicked : [],\n    gameOver: false\n  }\n\n  ResetGame = () => {\n    this.setState({ \n      currentScore: 0,\n      gameOver: false,\n      beenClicked: []\n    });\n    this.ShuffleCards(numbers)\n  }\n\n  ShuffleCards = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n  }\n\n  HandleClickEvent = id => {\n    if(this.state.beenClicked.includes(id)) {\n      this.setState({ currentScore: 0 })\n      this.setState({ gameOver: true })\n      if(this.state.currentScore > this.state.highScore){\n        this.setState({ highScore : this.state.currentScore })\n      }\n      } else {\n        this.setState({\n          beenClicked : this.state.beenClicked.concat(id),\n          currentScore : this.state.currentScore +1\n        })\n        this.ShuffleCards(this.state.numbers);\n      }\n\n  }\n\n  MakeNumberCards = () => {\n    return (\n      this.state.numbers.map(number => {\n        return (\n        <PictureCard key={number.id} name={number.name} color={number.color} handleClick={this.HandleClickEvent}/>\n        )\n      })\n    )\n  }\n\n  render() {\n  return (\n    <div>\n      <Header />\n      <ScoreBar highScore={this.state.highScore} score={this.state.currentScore}/>\n      <div className=\"container\" id=\"main-content\">\n      {this.state.gameOver && <PlayAgain reset={this.ResetGame}/>}\n      <div className=\"flex-box\">\n        {this.MakeNumberCards()}\n      </div>\n      </div>\n    </div>\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}